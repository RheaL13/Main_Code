import os
import random
import re
import webbrowser
from datetime import datetime

import tkinter as tk
from tkinter import ttk
from tkinter import IntVar
from tkinter import messagebox as mb
from PIL import Image
from PIL import ImageTk

data = {
    'question': [
        "Which word is spelled correctly?",
        "What is the plural of 'fox'?",
        "Which sentence is correct?",
        "What does the word 'tiny' mean?",
        "Choose the word that rhymes with 'cake'",
        "What is the opposite of 'happy'?",
        "What word fits best? 'The cat sat ___ the mat.'",
        "Which word is a noun?",
        "Which sentence uses capital letters correctly?",
        "Choose the correct past tense: 'What did she ___ yesterday?'",
        "Choose the correct spelling:",
        "Which word is an adjective?",
        "What does 'gigantic' mean?",
        "Which sentence is a question?",
        "Choose the correct version of 'they're'"
    ],
    'options': [
        ["a) frend", "b) fren", "c) friend", "d) frand"],
        ["a) foxes", "b) foxs", "c) foxes", "d) foxess"],
        ["a) She can goes fast.", "b) She going fast.", "c) She goes fast.", "d) She go fast."],
        ["a) loud", "b) fast", "c) very small", "d) very bright"],
        ["a) cook", "b) chalk", "c) lake", "d) kick"],
        ["a) tired", "b) sad", "c) excited", "d) angry"],
        ["a) on", "b) on", "c) in", "d) under"],
        ["a) quickly", "b) apple", "c) red", "d) run"],
        ["a) i like school.", "b) my name is jack.", "c) My name is Jack.", "d) Today is monday."],
        ["a) go", "b) do", "c) does", "d) doing"],
        ["a) becaus", "b) because", "c) becuase", "d) becouse"],
        ["a) jump", "b) tall", "c) run", "d) dog"],
        ["a) tricky", "b) bumpy", "c) very big", "d) very fast"],
        ["a) I like ice cream", "b) She has a bike", "c) Do you like ice cream?", "d) We saw a dog"],
        ["a) Their going to the beach.", "b) There going to the beach.", "c) Theyâ€™re going to the beach.", "d) They going to the beach."]
    ],
    'answer': [2, 2, 2, 2, 2, 1, 1, 1, 2, 1, 1, 2, 2, 2]
}


class Quiz:
    """Code for the normal ordered quiz."""
    def __init__(self, root, username):
        """The basic code for the display of the quiz window."""
        self.root = root
        self.root.configure(bg="oldlace")
        self.username = username  # Now part of the class
        self.q_no = 0
        self.correct = 0
        self.display_title()
        self.display_question()
        self.opt_selected = IntVar()
        self.opts = self.radio_buttons()
        self.display_options()
        self.buttons()
        self.data_size = len(data['question'])
        
        # Progress bar setup
        style = ttk.Style()
        style.theme_use('clam')
        style.configure("green.Horizontal.TProgressbar", 
                        thickness=30, 
                        troughcolor='black', 
                        background='green')
        self.progress_var = tk.DoubleVar()
        self.progress_bar = ttk.Progressbar(self.root, maximum=100, length=300, 
                                             variable=self.progress_var, 
                                             style="green.Horizontal.TProgressbar")
        self.progress_bar.place(x=50, y=95)
        self.update_progress_bar()

    def next_btn(self):
        """Tell the user that they need to click an option (answer)."""
        if self.opt_selected.get() == 0:
            mb.showwarning("Warning", "Please select an option before proceeding.", parent=self.root)
            return
        
        if self.check_ans(self.q_no):
            self.correct += 1
        
        self.q_no += 1

        if self.q_no == self.data_size:
            self.update_progress_bar(final=True)  # Progress bar to 100%
            self.root.after(100, self.display_result)  
        else:
            self.update_progress_bar()
            self.display_question()
            self.display_options()
    
    def display_result(self):
        """Displaying the correct, wrong, and overall score of the quiz."""
        wrong_count = self.data_size - self.correct
        correct = f"Correct: {self.correct}"
        wrong = f"Wrong: {wrong_count}"
        score = int(self.correct / self.data_size * 100)
        result = f"Score: {score}%"
        mb.showinfo("Result", f"{result}\n{correct}\n{wrong}", parent=self.root)
        
        date = datetime.now().strftime('%d/%m/%Y %H:%M:%S')

        # Save results to user's file with their info
        with open(f"{self.username}.txt", 'a') as data: 
            data.write("\nQuiz scores: \n")
            data.write(f"Date: {date}\n")
            data.write(f"Correct: {self.correct}\n")
            data.write(f"Wrong: {wrong_count}\n")
            data.write(f"Score: {score}%\n")

        # Add the popup messagebox
        mb.showinfo("Learn More", "To do better next time, go to the 'LEARN' tab to learn more.", parent=self.root)
        self.root.destroy()

    def check_ans(self, q_no):
        """Checking the answers of the options the user clicked."""
        return self.opt_selected.get() == data['answer'][q_no]

    def buttons(self):
        """Important buttons for the quiz."""
        next_button = tk.Button(self.root, text="NEXT", command=self.next_btn,
                                bg="white", fg="black", width=7, height=1, 
                                font=("Helvetica", 16, "bold"))
        next_button.place(x=470, y=550)
        quit_button = tk.Button(self.root, text="EXIT", 
                                bg="white", width=7, height=1,
                                fg="black", command=self.check_exit,
                                font=("Helvetica", 16, "bold"))
        quit_button.place(x=920, y=95)

    def check_exit(self):
        """Verify if the user wants to exit, because progress will not be saved."""
        result = mb.askquestion("Exit", "Are you sure you want to exit the quiz now?", parent=self.root)
        if result == "yes":
            self.root.destroy()

    def display_options(self):
        """Displaying the options for the different questions."""
        val = 0
        self.opt_selected.set(0)
        for option in data['options'][self.q_no]:
            self.opts[val]['text'] = option
            val += 1
    
    def display_question(self):
        """Displaying the questions for the quiz."""
        if hasattr(self, 'q_label'):
            self.q_label.destroy()  # Destroy previous question label
        self.q_label = tk.Label(self.root, text=data['question'][self.q_no], 
                                width=100, font=('Helvetica', 20, 'bold'), 
                                anchor='w', wraplength=900, justify='left',
                                bg="oldlace", fg="black")
        self.q_label.place(x=50, y=150)

    def display_title(self):
        """Title of the quiz."""
        title = tk.Label(self.root, text="OVERCONSUMPTION QUIZ",
                         width=50, bg="green", fg="white", height=2,
                         font=("Helvetica", 26, "bold"))
        title.place(x=0, y=0)

    def radio_buttons(self):
        """How the options are shown and clicked by the user (radio buttons)."""
        q_list = []
        y_pos = 250
        while len(q_list) < 4:
            radio_btn = tk.Radiobutton(self.root, text=" ", 
                                       variable=self.opt_selected,
                                       value=len(q_list) + 1, 
                                       font=("Helvetica", 18),
                                       fg="black", 
                                       bg="oldlace")
            q_list.append(radio_btn)
            radio_btn.place(x=100, y=y_pos)
            y_pos += 60
        return q_list

    def update_progress_bar(self, final=False):
        """Updating the progress bar when moving onto the next question."""
        if final or self.q_no >= self.data_size:
            self.progress_var.set(100)
        else:
            self.progress_var.set((self.q_no / self.data_size) * 100)


if __name__ == "__main__":
    root = tk.Tk()
    username = "user1"  # Example username; this would typically come from the login process
    app = Quiz(root, username)
    root.mainloop()
